
My_Ship_V.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004070  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080041a8  080041a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041a8  080041a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  080041bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080041bc  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1de  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207a  00000000  00000000  0002c213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8b  00000000  00000000  0002fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcf1  00000000  00000000  00047ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8c1  00000000  00000000  000557c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  000e00d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004168 	.word	0x08004168

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004168 	.word	0x08004168

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_DMA_Init+0x48>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MX_DMA_Init+0x48>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_DMA_Init+0x48>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200e      	movs	r0, #14
 8000780:	f001 f891 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000784:	200e      	movs	r0, #14
 8000786:	f001 f8aa 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	200f      	movs	r0, #15
 8000790:	f001 f889 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000794:	200f      	movs	r0, #15
 8000796:	f001 f8a2 	bl	80018de <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0x98>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <MX_GPIO_Init+0x98>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0x98>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_GPIO_Init+0x98>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <MX_GPIO_Init+0x98>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0x98>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007f2:	f001 fc23 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2138      	movs	r1, #56	; 0x38
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007fc:	f001 fc1e 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000800:	2301      	movs	r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0x9c>)
 8000818:	f001 fa8c 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800081c:	2338      	movs	r3, #56	; 0x38
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0x9c>)
 8000834:	f001 fa7e 	bl	8001d34 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	40010c00 	.word	0x40010c00

08000848 <cleanTxArr>:
uint8_t StickPos[4] = { };
uint8_t transmitBuff[end_array_index] = { };
uint8_t reciveBuff[end_array_index] = { };
uint8_t adress_slave_device = 0;

void cleanTxArr() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < end_array_index; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	e006      	b.n	8000862 <cleanTxArr+0x1a>
		transmitBuff[i] = 0xFF; // код стоп байта
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <cleanTxArr+0x44>)
 8000858:	21ff      	movs	r1, #255	; 0xff
 800085a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < end_array_index; i++) {
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3301      	adds	r3, #1
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b31      	cmp	r3, #49	; 0x31
 8000866:	d9f5      	bls.n	8000854 <cleanTxArr+0xc>
	}
	transmitBuff[adress_slave_index] = adress_ship;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <cleanTxArr+0x44>)
 800086a:	2260      	movs	r2, #96	; 0x60
 800086c:	701a      	strb	r2, [r3, #0]
	transmitBuff[adress_master_index] = adress_master_device;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <cleanTxArr+0x44>)
 8000870:	2220      	movs	r2, #32
 8000872:	705a      	strb	r2, [r3, #1]

	transmitBuff[crc_adress_devices] = crc(transmitBuff, 2);    //crc
 8000874:	2102      	movs	r1, #2
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <cleanTxArr+0x44>)
 8000878:	f000 f962 	bl	8000b40 <crc>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <cleanTxArr+0x44>)
 8000882:	709a      	strb	r2, [r3, #2]
																// добавить проверку на правильность адреса и устройства
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000028 	.word	0x20000028

08000890 <cleanRxArr>:

void cleanRxArr() {
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < end_array_index; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	e006      	b.n	80008aa <cleanRxArr+0x1a>
		reciveBuff[i] = 0xFF; // код стоп байта
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <cleanRxArr+0x30>)
 80008a0:	21ff      	movs	r1, #255	; 0xff
 80008a2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < end_array_index; i++) {
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3301      	adds	r3, #1
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b31      	cmp	r3, #49	; 0x31
 80008ae:	d9f5      	bls.n	800089c <cleanRxArr+0xc>
	}
	flagEvent.rxSize = 0;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <cleanRxArr+0x34>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	2000005c 	.word	0x2000005c
 80008c4:	20000090 	.word	0x20000090

080008c8 <pushArrTX>:

uint8_t pushArrTX(uint8_t addres_module, uint8_t *pData, uint8_t size,
		uint8_t typeOperation) {
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6039      	str	r1, [r7, #0]
 80008d0:	4611      	mov	r1, r2
 80008d2:	461a      	mov	r2, r3
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	460b      	mov	r3, r1
 80008da:	71bb      	strb	r3, [r7, #6]
 80008dc:	4613      	mov	r3, r2
 80008de:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
	while (transmitBuff[i] != 0xFF) { // найти конец полезных данных, не выходя за пределы массива.
 80008e4:	e00b      	b.n	80008fe <pushArrTX+0x36>
		if (i < (end_array_index - (size + 5))) { //5 = адрес модуля, тип операции, crc, байт конца команды, стоп.
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 80008ee:	429a      	cmp	r2, r3
 80008f0:	da03      	bge.n	80008fa <pushArrTX+0x32>
			i++;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e001      	b.n	80008fe <pushArrTX+0x36>
		} else {
			return 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e05e      	b.n	80009bc <pushArrTX+0xf4>
	while (transmitBuff[i] != 0xFF) { // найти конец полезных данных, не выходя за пределы массива.
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <pushArrTX+0xfc>)
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d1ee      	bne.n	80008e6 <pushArrTX+0x1e>
		}
	}
	transmitBuff[i] = addres_module;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	492e      	ldr	r1, [pc, #184]	; (80009c4 <pushArrTX+0xfc>)
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	54ca      	strb	r2, [r1, r3]
	i++;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	3301      	adds	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
	transmitBuff[i] = typeOperation;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	492a      	ldr	r1, [pc, #168]	; (80009c4 <pushArrTX+0xfc>)
 800091a:	797a      	ldrb	r2, [r7, #5]
 800091c:	54ca      	strb	r2, [r1, r3]
	i++;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	3301      	adds	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]

	for (uint8_t index = i; index < (i + size); index++) {
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	73bb      	strb	r3, [r7, #14]
 8000928:	e00c      	b.n	8000944 <pushArrTX+0x7c>
		transmitBuff[index] = pData[index - i];
 800092a:	7bba      	ldrb	r2, [r7, #14]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	461a      	mov	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	441a      	add	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	7811      	ldrb	r1, [r2, #0]
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <pushArrTX+0xfc>)
 800093c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index = i; index < (i + size); index++) {
 800093e:	7bbb      	ldrb	r3, [r7, #14]
 8000940:	3301      	adds	r3, #1
 8000942:	73bb      	strb	r3, [r7, #14]
 8000944:	7bba      	ldrb	r2, [r7, #14]
 8000946:	7bf9      	ldrb	r1, [r7, #15]
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	440b      	add	r3, r1
 800094c:	429a      	cmp	r2, r3
 800094e:	dbec      	blt.n	800092a <pushArrTX+0x62>
	}

	transmitBuff[i + size] = crc(transmitBuff + (i - 2), size + 2); // crc адреса и команды   2 = смещение назад для адреса модуля и типа команды.
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	3b02      	subs	r3, #2
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <pushArrTX+0xfc>)
 8000956:	1898      	adds	r0, r3, r2
 8000958:	79bb      	ldrb	r3, [r7, #6]
 800095a:	3302      	adds	r3, #2
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	18d4      	adds	r4, r2, r3
 8000964:	f000 f8ec 	bl	8000b40 <crc>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <pushArrTX+0xfc>)
 800096e:	551a      	strb	r2, [r3, r4]
	transmitBuff[i + size + 1] = 0xFC;  // конец команды
 8000970:	7bfa      	ldrb	r2, [r7, #15]
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	4413      	add	r3, r2
 8000976:	3301      	adds	r3, #1
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <pushArrTX+0xfc>)
 800097a:	21fc      	movs	r1, #252	; 0xfc
 800097c:	54d1      	strb	r1, [r2, r3]
	transmitBuff[i + size + 2] = crc(transmitBuff, i + size + 2); // хеш отправки
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	4413      	add	r3, r2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3302      	adds	r3, #2
 8000988:	b2d9      	uxtb	r1, r3
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	1c9c      	adds	r4, r3, #2
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <pushArrTX+0xfc>)
 8000994:	f000 f8d4 	bl	8000b40 <crc>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <pushArrTX+0xfc>)
 800099e:	551a      	strb	r2, [r3, r4]
	transmitBuff[i + size + 3] = 0xFF;  // стоп байт
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	4413      	add	r3, r2
 80009a6:	3303      	adds	r3, #3
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <pushArrTX+0xfc>)
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	54d1      	strb	r1, [r2, r3]

	i = i + (size + 3) + 1;
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4413      	add	r3, r2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	3304      	adds	r3, #4
 80009b8:	73fb      	strb	r3, [r7, #15]
	return i;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000028 	.word	0x20000028

080009c8 <changeSpeed>:

uint8_t changeSpeed(uint8_t speed, uint8_t direct) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]

	if (direct == 0) {      //на месте
 80009d8:	79bb      	ldrb	r3, [r7, #6]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d107      	bne.n	80009ee <changeSpeed+0x26>
		TIM2->CCR1 = 0;
 80009de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e2:	2200      	movs	r2, #0
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 80009e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ea:	2200      	movs	r2, #0
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (direct == 1) {		//вперед
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d136      	bne.n	8000a62 <changeSpeed+0x9a>
		TIM2->CCR1 = 0;
 80009f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f8:	2200      	movs	r2, #0
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
		if (speed < 70)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b45      	cmp	r3, #69	; 0x45
 8000a00:	d808      	bhi.n	8000a14 <changeSpeed+0x4c>
			TIM2->CCR2 = min_PWM + (oneProcent * speed); // так должно быть в идеале
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	4613      	mov	r3, r2
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	f603 2224 	addw	r2, r3, #2596	; 0xa24
 8000a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a12:	639a      	str	r2, [r3, #56]	; 0x38

		if (speed >= 90) {
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b59      	cmp	r3, #89	; 0x59
 8000a18:	d923      	bls.n	8000a62 <changeSpeed+0x9a>
			if (TIM2->CCR2 <= min_PWM) {
 8000a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a20:	f640 2224 	movw	r2, #2596	; 0xa24
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d804      	bhi.n	8000a32 <changeSpeed+0x6a>
				TIM2->CCR2 = min_PWM;
 8000a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2c:	f640 2224 	movw	r2, #2596	; 0xa24
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38
			}
			for (uint16_t i = TIM2->CCR2; i < (min_PWM + (oneProcent * speed));
 8000a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a38:	81fb      	strh	r3, [r7, #14]
 8000a3a:	e009      	b.n	8000a50 <changeSpeed+0x88>
					i = i + 10) {
				TIM2->CCR2 = i;
 8000a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	6393      	str	r3, [r2, #56]	; 0x38
				HAL_Delay(2);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f000 fe33 	bl	80016b0 <HAL_Delay>
					i = i + 10) {
 8000a4a:	89fb      	ldrh	r3, [r7, #14]
 8000a4c:	330a      	adds	r3, #10
 8000a4e:	81fb      	strh	r3, [r7, #14]
			for (uint16_t i = TIM2->CCR2; i < (min_PWM + (oneProcent * speed));
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	4613      	mov	r3, r2
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	f603 2223 	addw	r2, r3, #2595	; 0xa23
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	daec      	bge.n	8000a3c <changeSpeed+0x74>
			}
		}
	}
	if (direct == 2) {           //назад
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d10c      	bne.n	8000a82 <changeSpeed+0xba>
		TIM2->CCR1 = min_PWM + (oneProcent * speed);
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	f603 2224 	addw	r2, r3, #2596	; 0xa24
 8000a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8000a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7e:	2200      	movs	r2, #0
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
	}
return direct;
 8000a82:	79bb      	ldrb	r3, [r7, #6]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0000      	movs	r0, r0
	...

08000a90 <changeAngle>:

uint8_t changeAngle(uint8_t angle_pwm, uint8_t direct) {
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]
if (direct == 0) {
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <changeAngle+0x1c>
	TIM3->CCR1 = middle_PWM_angle;   //90 градусов
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <changeAngle+0xa8>)
 8000aa8:	22af      	movs	r2, #175	; 0xaf
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34

}
if (direct == 1) {				//направо
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d118      	bne.n	8000ae4 <changeAngle+0x54>
	TIM3->CCR1 = middle_PWM_angle - (oneStep * angle_pwm); //    0 градусов.
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fdc7 	bl	8000648 <__aeabi_i2d>
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <changeAngle+0xac>)
 8000ac0:	f7ff fb46 	bl	8000150 <__aeabi_dmul>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	a119      	add	r1, pc, #100	; (adr r1, 8000b30 <changeAngle+0xa0>)
 8000aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ace:	f7ff fc6d 	bl	80003ac <__aeabi_dsub>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4c18      	ldr	r4, [pc, #96]	; (8000b38 <changeAngle+0xa8>)
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f7ff fe1e 	bl	800071c <__aeabi_d2uiz>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	6363      	str	r3, [r4, #52]	; 0x34

}
if (direct == 2) {				//налево
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d11a      	bne.n	8000b20 <changeAngle+0x90>
	TIM3->CCR1 = (oneStep * angle_pwm) + middle_PWM_angle; //  180 градусов
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdab 	bl	8000648 <__aeabi_i2d>
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <changeAngle+0xac>)
 8000af8:	f7ff fb2a 	bl	8000150 <__aeabi_dmul>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4610      	mov	r0, r2
 8000b02:	4619      	mov	r1, r3
 8000b04:	a30a      	add	r3, pc, #40	; (adr r3, 8000b30 <changeAngle+0xa0>)
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	f7ff fc51 	bl	80003b0 <__adddf3>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4c09      	ldr	r4, [pc, #36]	; (8000b38 <changeAngle+0xa8>)
 8000b14:	4610      	mov	r0, r2
 8000b16:	4619      	mov	r1, r3
 8000b18:	f7ff fe00 	bl	800071c <__aeabi_d2uiz>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	6363      	str	r3, [r4, #52]	; 0x34

}
return direct;
 8000b20:	79bb      	ldrb	r3, [r7, #6]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	f3af 8000 	nop.w
 8000b30:	00000000 	.word	0x00000000
 8000b34:	4065e000 	.word	0x4065e000
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	3fe80000 	.word	0x3fe80000

08000b40 <crc>:

changeSpeed(StickPos[0], StickPos[1]);
changeAngle(StickPos[2], StickPos[3]);
}

uint8_t crc(uint8_t *pData, uint8_t size) {
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
uint16_t crc = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	81fb      	strh	r3, [r7, #14]
for (uint8_t i = 0; i < size; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	737b      	strb	r3, [r7, #13]
 8000b54:	e019      	b.n	8000b8a <crc+0x4a>
	crc = crc + (pData[i] * 44111);
 8000b56:	7b7b      	ldrb	r3, [r7, #13]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	441a      	add	r2, r3
 8000b66:	4611      	mov	r1, r2
 8000b68:	0189      	lsls	r1, r1, #6
 8000b6a:	1a8a      	subs	r2, r1, r2
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	0091      	lsls	r1, r2, #2
 8000b74:	461a      	mov	r2, r3
 8000b76:	460b      	mov	r3, r1
 8000b78:	4413      	add	r3, r2
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	4413      	add	r3, r2
 8000b82:	81fb      	strh	r3, [r7, #14]
for (uint8_t i = 0; i < size; i++) {
 8000b84:	7b7b      	ldrb	r3, [r7, #13]
 8000b86:	3301      	adds	r3, #1
 8000b88:	737b      	strb	r3, [r7, #13]
 8000b8a:	7b7a      	ldrb	r2, [r7, #13]
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3e1      	bcc.n	8000b56 <crc+0x16>
}
return (uint8_t) crc;
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	b2db      	uxtb	r3, r3

}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <direct_Led_HELLO>:

void direct_Led_HELLO() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
for (uint8_t i = 0; i < 6; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e012      	b.n	8000bd2 <direct_Led_HELLO+0x32>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000bac:	2108      	movs	r1, #8
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <direct_Led_HELLO+0x60>)
 8000bb0:	f001 fa5c 	bl	800206c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <direct_Led_HELLO+0x60>)
 8000bb8:	f001 fa58 	bl	800206c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4810      	ldr	r0, [pc, #64]	; (8000c00 <direct_Led_HELLO+0x60>)
 8000bc0:	f001 fa54 	bl	800206c <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000bc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bc8:	f000 fd72 	bl	80016b0 <HAL_Delay>
for (uint8_t i = 0; i < 6; i++) {
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b05      	cmp	r3, #5
 8000bd6:	d9e9      	bls.n	8000bac <direct_Led_HELLO+0xc>
}
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2108      	movs	r1, #8
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <direct_Led_HELLO+0x60>)
 8000bde:	f001 fa2d 	bl	800203c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <direct_Led_HELLO+0x60>)
 8000be8:	f001 fa28 	bl	800203c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <direct_Led_HELLO+0x60>)
 8000bf2:	f001 fa23 	bl	800203c <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <direct_Led>:

void direct_Led(uint8_t Red, uint8_t Green, uint8_t Blue) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	71bb      	strb	r3, [r7, #6]
 8000c12:	4613      	mov	r3, r2
 8000c14:	717b      	strb	r3, [r7, #5]
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, Red);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <direct_Led+0x40>)
 8000c1e:	f001 fa0d 	bl	800203c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, Green);
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	461a      	mov	r2, r3
 8000c26:	2110      	movs	r1, #16
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <direct_Led+0x40>)
 8000c2a:	f001 fa07 	bl	800203c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, Blue);
 8000c2e:	797b      	ldrb	r3, [r7, #5]
 8000c30:	461a      	mov	r2, r3
 8000c32:	2120      	movs	r1, #32
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <direct_Led+0x40>)
 8000c36:	f001 fa01 	bl	800203c <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <connect_ok>:

void connect_ok(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
direct_Led_HELLO();
 8000c4c:	f7ff ffa8 	bl	8000ba0 <direct_Led_HELLO>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <parseArrRX>:

void parseArrRX(uint8_t *pData, uint8_t size) {
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]

if (reciveBuff[flagEvent.rxSize - 2] == crc(reciveBuff, flagEvent.rxSize - 2)) { //хеш сумма совпала
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <parseArrRX+0x80>)
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3b02      	subs	r3, #2
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <parseArrRX+0x84>)
 8000c6a:	5cd4      	ldrb	r4, [r2, r3]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <parseArrRX+0x80>)
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3b02      	subs	r3, #2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4619      	mov	r1, r3
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <parseArrRX+0x84>)
 8000c7a:	f7ff ff61 	bl	8000b40 <crc>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	429c      	cmp	r4, r3
 8000c82:	d118      	bne.n	8000cb6 <parseArrRX+0x62>

	if (flagEvent.contact == 1) {		//если уже поздоровались
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <parseArrRX+0x80>)
 8000c86:	795b      	ldrb	r3, [r3, #5]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <parseArrRX+0x3e>
		command_work();
 8000c8e:	f000 f85d 	bl	8000d4c <command_work>
	}

	if (flagEvent.contact == 0) { //если это приветствие
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <parseArrRX+0x80>)
 8000c94:	795b      	ldrb	r3, [r3, #5]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10c      	bne.n	8000cb6 <parseArrRX+0x62>
		if (reciveBuff[3] == adress_hc_12) {
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <parseArrRX+0x84>)
 8000c9e:	78db      	ldrb	r3, [r3, #3]
 8000ca0:	2baa      	cmp	r3, #170	; 0xaa
 8000ca2:	d108      	bne.n	8000cb6 <parseArrRX+0x62>
			if (reciveBuff[5] == 0xc8) {
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <parseArrRX+0x84>)
 8000ca6:	795b      	ldrb	r3, [r3, #5]
 8000ca8:	2bc8      	cmp	r3, #200	; 0xc8
 8000caa:	d104      	bne.n	8000cb6 <parseArrRX+0x62>
				flagEvent.contact = 1;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <parseArrRX+0x80>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	715a      	strb	r2, [r3, #5]
				connect_ok();
 8000cb2:	f7ff ffc9 	bl	8000c48 <connect_ok>
		}
	}

}

if (reciveBuff[flagEvent.rxSize - 2] != crc(reciveBuff, flagEvent.rxSize - 2)) {
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <parseArrRX+0x80>)
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <parseArrRX+0x80>)
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	3b02      	subs	r3, #2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <parseArrRX+0x84>)
 8000cc8:	f7ff ff3a 	bl	8000b40 <crc>

}   //хеш сумма не совпала

}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000090 	.word	0x20000090
 8000cd8:	2000005c 	.word	0x2000005c

08000cdc <initShip>:

void initShip(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
flagEvent.timerEvent = 0;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <initShip+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
flagEvent.dataReady = 0;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <initShip+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	705a      	strb	r2, [r3, #1]
flagEvent.rxReady = 0;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <initShip+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	709a      	strb	r2, [r3, #2]
flagEvent.txReady = 0;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <initShip+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	70da      	strb	r2, [r3, #3]
flagEvent.rxSize = 0;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <initShip+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	711a      	strb	r2, [r3, #4]
flagEvent.contact = 0;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <initShip+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	715a      	strb	r2, [r3, #5]
flagEvent.counterError = 0;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <initShip+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	719a      	strb	r2, [r3, #6]
flagEvent.Led = 0;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <initShip+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	71da      	strb	r2, [r3, #7]
flagEvent.txSize = 0;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <initShip+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	721a      	strb	r2, [r3, #8]
flagEvent.isCommand = 0;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <initShip+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	725a      	strb	r2, [r3, #9]

cleanTxArr();
 8000d1c:	f7ff fd94 	bl	8000848 <cleanTxArr>
cleanRxArr();
 8000d20:	f7ff fdb6 	bl	8000890 <cleanRxArr>

//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, reciveBuff, sizeof(reciveBuff));

HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d24:	2100      	movs	r1, #0
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <initShip+0x68>)
 8000d28:	f001 feca 	bl	8002ac0 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <initShip+0x68>)
 8000d30:	f001 fec6 	bl	8002ac0 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d34:	2100      	movs	r1, #0
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <initShip+0x6c>)
 8000d38:	f001 fec2 	bl	8002ac0 <HAL_TIM_PWM_Start>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000090 	.word	0x20000090
 8000d44:	200000e4 	.word	0x200000e4
 8000d48:	2000009c 	.word	0x2000009c

08000d4c <command_work>:

void command_work(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
uint8_t i = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
while (reciveBuff[i] != 0xFF) {
 8000d56:	e086      	b.n	8000e66 <command_work+0x11a>
	if (i > end_array_index)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b32      	cmp	r3, #50	; 0x32
 8000d5c:	f200 808a 	bhi.w	8000e74 <command_work+0x128>
		break;

	switch (reciveBuff[i]) {
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <command_work+0x134>)
 8000d64:	5cd3      	ldrb	r3, [r2, r3]
 8000d66:	3baa      	subs	r3, #170	; 0xaa
 8000d68:	2b1e      	cmp	r3, #30
 8000d6a:	d878      	bhi.n	8000e5e <command_work+0x112>
 8000d6c:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <command_work+0x28>)
 8000d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d72:	bf00      	nop
 8000d74:	08000df1 	.word	0x08000df1
 8000d78:	08000e5f 	.word	0x08000e5f
 8000d7c:	08000e5f 	.word	0x08000e5f
 8000d80:	08000e5f 	.word	0x08000e5f
 8000d84:	08000e5f 	.word	0x08000e5f
 8000d88:	08000e5f 	.word	0x08000e5f
 8000d8c:	08000e5f 	.word	0x08000e5f
 8000d90:	08000e5f 	.word	0x08000e5f
 8000d94:	08000e5f 	.word	0x08000e5f
 8000d98:	08000e5f 	.word	0x08000e5f
 8000d9c:	08000df9 	.word	0x08000df9
 8000da0:	08000e5f 	.word	0x08000e5f
 8000da4:	08000e5f 	.word	0x08000e5f
 8000da8:	08000e5f 	.word	0x08000e5f
 8000dac:	08000e5f 	.word	0x08000e5f
 8000db0:	08000e5f 	.word	0x08000e5f
 8000db4:	08000e5f 	.word	0x08000e5f
 8000db8:	08000e5f 	.word	0x08000e5f
 8000dbc:	08000e5f 	.word	0x08000e5f
 8000dc0:	08000e5f 	.word	0x08000e5f
 8000dc4:	08000e1f 	.word	0x08000e1f
 8000dc8:	08000e5f 	.word	0x08000e5f
 8000dcc:	08000e5f 	.word	0x08000e5f
 8000dd0:	08000e5f 	.word	0x08000e5f
 8000dd4:	08000e5f 	.word	0x08000e5f
 8000dd8:	08000e5f 	.word	0x08000e5f
 8000ddc:	08000e5f 	.word	0x08000e5f
 8000de0:	08000e5f 	.word	0x08000e5f
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e5f 	.word	0x08000e5f
 8000dec:	08000e3f 	.word	0x08000e3f
	case adress_hc_12:
		i++;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	3301      	adds	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
		break;
 8000df6:	e036      	b.n	8000e66 <command_work+0x11a>
	case adress_LED:
		direct_Led(reciveBuff[i + 2], reciveBuff[i + 3], reciveBuff[i + 4]);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <command_work+0x134>)
 8000dfe:	5cd0      	ldrb	r0, [r2, r3]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3303      	adds	r3, #3
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <command_work+0x134>)
 8000e06:	5cd1      	ldrb	r1, [r2, r3]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <command_work+0x134>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	461a      	mov	r2, r3
 8000e12:	f7ff fef7 	bl	8000c04 <direct_Led>
		i = i + 7;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	3307      	adds	r3, #7
 8000e1a:	71fb      	strb	r3, [r7, #7]
		break;
 8000e1c:	e023      	b.n	8000e66 <command_work+0x11a>
	case adress_engine:
		changeSpeed(reciveBuff[i + 2], reciveBuff[i + 3]);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	3302      	adds	r3, #2
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <command_work+0x134>)
 8000e24:	5cd2      	ldrb	r2, [r2, r3]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3303      	adds	r3, #3
 8000e2a:	4915      	ldr	r1, [pc, #84]	; (8000e80 <command_work+0x134>)
 8000e2c:	5ccb      	ldrb	r3, [r1, r3]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4610      	mov	r0, r2
 8000e32:	f7ff fdc9 	bl	80009c8 <changeSpeed>
		i = i + 5;
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	3305      	adds	r3, #5
 8000e3a:	71fb      	strb	r3, [r7, #7]
		break;
 8000e3c:	e013      	b.n	8000e66 <command_work+0x11a>
	case adress_Servo:
		changeAngle(reciveBuff[i + 2], reciveBuff[i + 3]);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	3302      	adds	r3, #2
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <command_work+0x134>)
 8000e44:	5cd2      	ldrb	r2, [r2, r3]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	3303      	adds	r3, #3
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <command_work+0x134>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f7ff fe1d 	bl	8000a90 <changeAngle>
		i = i + 5;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	3305      	adds	r3, #5
 8000e5a:	71fb      	strb	r3, [r7, #7]
		break;
 8000e5c:	e003      	b.n	8000e66 <command_work+0x11a>
	default:
		i++;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	3301      	adds	r3, #1
 8000e62:	71fb      	strb	r3, [r7, #7]
		break;
 8000e64:	bf00      	nop
while (reciveBuff[i] != 0xFF) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <command_work+0x134>)
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	2bff      	cmp	r3, #255	; 0xff
 8000e6e:	f47f af73 	bne.w	8000d58 <command_work+0xc>
	}

}
}
 8000e72:	e000      	b.n	8000e76 <command_work+0x12a>
		break;
 8000e74:	bf00      	nop
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000005c 	.word	0x2000005c

08000e84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af02      	add	r7, sp, #8
/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000e8a:	f000 fbaf 	bl	80015ec <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 8000e8e:	f000 f867 	bl	8000f60 <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 8000e92:	f7ff fc89 	bl	80007a8 <MX_GPIO_Init>
MX_TIM2_Init();
 8000e96:	f000 f937 	bl	8001108 <MX_TIM2_Init>
MX_USART1_UART_Init();
 8000e9a:	f000 faad 	bl	80013f8 <MX_USART1_UART_Init>
MX_DMA_Init();
 8000e9e:	f7ff fc5d 	bl	800075c <MX_DMA_Init>
MX_TIM3_Init();
 8000ea2:	f000 f9a9 	bl	80011f8 <MX_TIM3_Init>
/* USER CODE BEGIN 2 */

initShip();
 8000ea6:	f7ff ff19 	bl	8000cdc <initShip>
/* USER CODE BEGIN WHILE */
while (1) {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	if (flagEvent.contact == 0) {
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <main+0xc8>)
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d123      	bne.n	8000efc <main+0x78>
		uint8_t ok = 0xc8;
 8000eb4:	23c8      	movs	r3, #200	; 0xc8
 8000eb6:	717b      	strb	r3, [r7, #5]

		uint8_t sizeBuff = pushArrTX(adress_hc_12, &ok, 1, 1);
 8000eb8:	1d79      	adds	r1, r7, #5
 8000eba:	2301      	movs	r3, #1
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	20aa      	movs	r0, #170	; 0xaa
 8000ec0:	f7ff fd02 	bl	80008c8 <pushArrTX>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart1, transmitBuff, sizeBuff, 100);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	4920      	ldr	r1, [pc, #128]	; (8000f50 <main+0xcc>)
 8000ed0:	4820      	ldr	r0, [pc, #128]	; (8000f54 <main+0xd0>)
 8000ed2:	f002 fbc0 	bl	8003656 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle(&huart1, reciveBuff, (uint16_t) 50,
 8000ed6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <main+0xd4>)
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	491e      	ldr	r1, [pc, #120]	; (8000f5c <main+0xd8>)
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <main+0xd0>)
 8000ee4:	f002 fc49 	bl	800377a <HAL_UARTEx_ReceiveToIdle>
				(uint8_t*) &flagEvent.rxSize, 500);
		//HAL_Delay(500);
		if (flagEvent.rxSize != 0) {
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <main+0xc8>)
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <main+0x74>
			flagEvent.rxReady = 1;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <main+0xc8>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	709a      	strb	r2, [r3, #2]
		}

		cleanTxArr();
 8000ef8:	f7ff fca6 	bl	8000848 <cleanTxArr>
	}
	if (flagEvent.rxReady == 1) {
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <main+0xc8>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10b      	bne.n	8000f1e <main+0x9a>
		flagEvent.rxReady = 0;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <main+0xc8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	709a      	strb	r2, [r3, #2]
		parseArrRX(reciveBuff, flagEvent.rxSize);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <main+0xc8>)
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <main+0xd8>)
 8000f16:	f7ff fe9d 	bl	8000c54 <parseArrRX>
		cleanRxArr();
 8000f1a:	f7ff fcb9 	bl	8000890 <cleanRxArr>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, reciveBuff,					sizeof(reciveBuff));
	}

	if (flagEvent.contact == 1) {
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <main+0xc8>)
 8000f20:	795b      	ldrb	r3, [r3, #5]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d1c0      	bne.n	8000eaa <main+0x26>
		uint8_t a = flagEvent.contact;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <main+0xc8>)
 8000f2a:	795b      	ldrb	r3, [r3, #5]
 8000f2c:	71bb      	strb	r3, [r7, #6]
		HAL_UARTEx_ReceiveToIdle(&huart1, reciveBuff, (uint16_t) 50,
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <main+0xd4>)
 8000f34:	2232      	movs	r2, #50	; 0x32
 8000f36:	4909      	ldr	r1, [pc, #36]	; (8000f5c <main+0xd8>)
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <main+0xd0>)
 8000f3a:	f002 fc1e 	bl	800377a <HAL_UARTEx_ReceiveToIdle>
				(uint8_t*) &flagEvent.rxSize, 100);
		flagEvent.contact = a;
 8000f3e:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <main+0xc8>)
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	7153      	strb	r3, [r2, #5]
		flagEvent.rxReady = 1;
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <main+0xc8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	709a      	strb	r2, [r3, #2]
	if (flagEvent.contact == 0) {
 8000f4a:	e7ae      	b.n	8000eaa <main+0x26>
 8000f4c:	20000090 	.word	0x20000090
 8000f50:	20000028 	.word	0x20000028
 8000f54:	200001b4 	.word	0x200001b4
 8000f58:	20000094 	.word	0x20000094
 8000f5c:	2000005c 	.word	0x2000005c

08000f60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b090      	sub	sp, #64	; 0x40
 8000f64:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2228      	movs	r2, #40	; 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 f8f2 	bl	8004158 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f86:	2301      	movs	r3, #1
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.HSICalibrationValue =
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_HSICALIBRATION_DEFAULT;
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f882 	bl	80020a0 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x46>
	Error_Handler();
 8000fa2:	f000 f82d 	bl	8001000 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	607b      	str	r3, [r7, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 faee 	bl	80025a0 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x6e>
	Error_Handler();
 8000fca:	f000 f819 	bl	8001000 <Error_Handler>
}
}
 8000fce:	bf00      	nop
 8000fd0:	3740      	adds	r7, #64	; 0x40
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
//HAL_UART_Transmit(&huart1, reciveBuff, Size, 100);
flagEvent.rxReady = 1;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_UARTEx_RxEventCallback+0x24>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	709a      	strb	r2, [r3, #2]
flagEvent.rxSize = Size;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_UARTEx_RxEventCallback+0x24>)
 8000ff0:	711a      	strb	r2, [r3, #4]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000090 	.word	0x20000090

08001000 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_MspInit+0x5c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x5c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x60>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_MspInit+0x60>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 fadf 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA1_Channel4_IRQHandler+0x10>)
 80010c6:	f000 fd2f 	bl	8001b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000012c 	.word	0x2000012c

080010d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <DMA1_Channel5_IRQHandler+0x10>)
 80010da:	f000 fd25 	bl	8001b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000170 	.word	0x20000170

080010e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART1_IRQHandler+0x10>)
 80010ee:	f002 fc21 	bl	8003934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001b4 	.word	0x200001b4

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_TIM2_Init+0xec>)
 800112c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001130:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_TIM2_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <MX_TIM2_Init+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_TIM2_Init+0xec>)
 8001140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001144:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_TIM2_Init+0xec>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_TIM2_Init+0xec>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001152:	4828      	ldr	r0, [pc, #160]	; (80011f4 <MX_TIM2_Init+0xec>)
 8001154:	f001 fc65 	bl	8002a22 <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800115e:	f7ff ff4f 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001162:	4824      	ldr	r0, [pc, #144]	; (80011f4 <MX_TIM2_Init+0xec>)
 8001164:	f001 fc05 	bl	8002972 <HAL_TIM_OC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800116e:	f7ff ff47 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	4619      	mov	r1, r3
 8001180:	481c      	ldr	r0, [pc, #112]	; (80011f4 <MX_TIM2_Init+0xec>)
 8001182:	f002 f9bd 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800118c:	f7ff ff38 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	2360      	movs	r3, #96	; 0x60
 8001192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_TIM2_Init+0xec>)
 80011a8:	f001 fd84 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80011b2:	f7ff ff25 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2204      	movs	r2, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM2_Init+0xec>)
 80011be:	f001 fd79 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80011c8:	f7ff ff1a 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_TIM2_Init+0xec>)
 80011d8:	f001 fd14 	bl	8002c04 <HAL_TIM_OC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80011e2:	f7ff ff0d 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <MX_TIM2_Init+0xec>)
 80011e8:	f000 f8b6 	bl	8001358 <HAL_TIM_MspPostInit>

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000e4 	.word	0x200000e4

080011f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_TIM3_Init+0xe4>)
 800122a:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <MX_TIM3_Init+0xe8>)
 800122c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MX_TIM3_Init+0xe4>)
 8001230:	2250      	movs	r2, #80	; 0x50
 8001232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_TIM3_Init+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_TIM3_Init+0xe4>)
 800123c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_TIM3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_TIM3_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <MX_TIM3_Init+0xe4>)
 8001250:	f001 fb40 	bl	80028d4 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800125a:	f7ff fed1 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4619      	mov	r1, r3
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_TIM3_Init+0xe4>)
 800126c:	f001 fde0 	bl	8002e30 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001276:	f7ff fec3 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM3_Init+0xe4>)
 800127c:	f001 fbd1 	bl	8002a22 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001286:	f7ff febb 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_TIM3_Init+0xe4>)
 800129a:	f002 f931 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f7ff feac 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM3_Init+0xe4>)
 80012c0:	f001 fcf8 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012ca:	f7ff fe99 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM3_Init+0xe4>)
 80012d0:	f000 f842 	bl	8001358 <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000009c 	.word	0x2000009c
 80012e0:	40000400 	.word	0x40000400

080012e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d10b      	bne.n	800130e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_TIM_PWM_MspInit+0x34>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_TIM_PWM_MspInit+0x34>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_TIM_PWM_MspInit+0x34>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x34>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10b      	bne.n	8001346 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_TIM_Base_MspInit+0x38>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_TIM_Base_MspInit+0x38>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_TIM_Base_MspInit+0x38>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40000400 	.word	0x40000400
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001376:	d118      	bne.n	80013aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_TIM_MspPostInit+0x94>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_TIM_MspPostInit+0x94>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_TIM_MspPostInit+0x94>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <HAL_TIM_MspPostInit+0x98>)
 80013a4:	f000 fcc6 	bl	8001d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013a8:	e01c      	b.n	80013e4 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_TIM_MspPostInit+0x9c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d117      	bne.n	80013e4 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_TIM_MspPostInit+0x94>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_TIM_MspPostInit+0x94>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_MspPostInit+0x94>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <HAL_TIM_MspPostInit+0x98>)
 80013e0:	f000 fca8 	bl	8001d34 <HAL_GPIO_Init>
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40000400 	.word	0x40000400

080013f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f002 f8c4 	bl	80035bc <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f7ff fde1 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001b4 	.word	0x200001b4
 8001448:	40013800 	.word	0x40013800

0800144c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_UART_MspInit+0x138>)
 8001468:	4293      	cmp	r3, r2
 800146a:	f040 8086 	bne.w	800157a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_UART_MspInit+0x13c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a45      	ldr	r2, [pc, #276]	; (8001588 <HAL_UART_MspInit+0x13c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_UART_MspInit+0x13c>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b40      	ldr	r3, [pc, #256]	; (8001588 <HAL_UART_MspInit+0x13c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a3f      	ldr	r2, [pc, #252]	; (8001588 <HAL_UART_MspInit+0x13c>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <HAL_UART_MspInit+0x13c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	4836      	ldr	r0, [pc, #216]	; (800158c <HAL_UART_MspInit+0x140>)
 80014b4:	f000 fc3e 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	482f      	ldr	r0, [pc, #188]	; (800158c <HAL_UART_MspInit+0x140>)
 80014ce:	f000 fc31 	bl	8001d34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014d4:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <HAL_UART_MspInit+0x148>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001502:	4823      	ldr	r0, [pc, #140]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001504:	f000 fa06 	bl	8001914 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800150e:	f7ff fd77 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_UART_MspInit+0x144>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_UART_MspInit+0x150>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001526:	2210      	movs	r2, #16
 8001528:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_UART_MspInit+0x14c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_UART_MspInit+0x14c>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_UART_MspInit+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001550:	f000 f9e0 	bl	8001914 <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800155a:	f7ff fd51 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001562:	635a      	str	r2, [r3, #52]	; 0x34
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2025      	movs	r0, #37	; 0x25
 8001570:	f000 f999 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001574:	2025      	movs	r0, #37	; 0x25
 8001576:	f000 f9b2 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40013800 	.word	0x40013800
 8001588:	40021000 	.word	0x40021000
 800158c:	40010800 	.word	0x40010800
 8001590:	20000170 	.word	0x20000170
 8001594:	40020058 	.word	0x40020058
 8001598:	2000012c 	.word	0x2000012c
 800159c:	40020044 	.word	0x40020044

080015a0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015c6:	f7ff fd99 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f002 fda1 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7ff fc59 	bl	8000e84 <main>
  bx lr
 80015d2:	4770      	bx	lr
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015dc:	080041b0 	.word	0x080041b0
  ldr r2, =_sbss
 80015e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015e4:	200001fc 	.word	0x200001fc

080015e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_2_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f947 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fd00 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f95f 	bl	80018fa <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f927 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_IncTick+0x1c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_IncTick+0x20>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000008 	.word	0x20000008
 8001698:	200001f8 	.word	0x200001f8

0800169c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_GetTick+0x10>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	200001f8 	.word	0x200001f8

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff fff0 	bl	800169c <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_Delay+0x44>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d6:	bf00      	nop
 80016d8:	f7ff ffe0 	bl	800169c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <__NVIC_EnableIRQ+0x34>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff90 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff2d 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff42 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff90 	bl	80017e8 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5f 	bl	8001794 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff35 	bl	800175c <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e043      	b.n	80019b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_DMA_Init+0xa8>)
 8001932:	4413      	add	r3, r2
 8001934:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <HAL_DMA_Init+0xac>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	009a      	lsls	r2, r3, #2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_DMA_Init+0xb0>)
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800195e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001962:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	bffdfff8 	.word	0xbffdfff8
 80019c0:	cccccccd 	.word	0xcccccccd
 80019c4:	40020000 	.word	0x40020000

080019c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d008      	beq.n	80019f0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2204      	movs	r2, #4
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e020      	b.n	8001a32 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 020e 	bic.w	r2, r2, #14
 80019fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d005      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2204      	movs	r2, #4
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e051      	b.n	8001b02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020e 	bic.w	r2, r2, #14
 8001a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_DMA_Abort_IT+0xd0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d029      	beq.n	8001adc <HAL_DMA_Abort_IT+0xa0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_DMA_Abort_IT+0xd4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d022      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0x9c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_DMA_Abort_IT+0xd8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d01a      	beq.n	8001ad2 <HAL_DMA_Abort_IT+0x96>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <HAL_DMA_Abort_IT+0xdc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d012      	beq.n	8001acc <HAL_DMA_Abort_IT+0x90>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_DMA_Abort_IT+0xe0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00a      	beq.n	8001ac6 <HAL_DMA_Abort_IT+0x8a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_DMA_Abort_IT+0xe4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d102      	bne.n	8001ac0 <HAL_DMA_Abort_IT+0x84>
 8001aba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001abe:	e00e      	b.n	8001ade <HAL_DMA_Abort_IT+0xa2>
 8001ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac4:	e00b      	b.n	8001ade <HAL_DMA_Abort_IT+0xa2>
 8001ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aca:	e008      	b.n	8001ade <HAL_DMA_Abort_IT+0xa2>
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	e005      	b.n	8001ade <HAL_DMA_Abort_IT+0xa2>
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	e002      	b.n	8001ade <HAL_DMA_Abort_IT+0xa2>
 8001ad8:	2310      	movs	r3, #16
 8001ada:	e000      	b.n	8001ade <HAL_DMA_Abort_IT+0xa2>
 8001adc:	2301      	movs	r3, #1
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_DMA_Abort_IT+0xe8>)
 8001ae0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    } 
  }
  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40020008 	.word	0x40020008
 8001b10:	4002001c 	.word	0x4002001c
 8001b14:	40020030 	.word	0x40020030
 8001b18:	40020044 	.word	0x40020044
 8001b1c:	40020058 	.word	0x40020058
 8001b20:	4002006c 	.word	0x4002006c
 8001b24:	40020000 	.word	0x40020000

08001b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2204      	movs	r2, #4
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d04f      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xc8>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d04a      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a66      	ldr	r2, [pc, #408]	; (8001d18 <HAL_DMA_IRQHandler+0x1f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d029      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0xae>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a65      	ldr	r2, [pc, #404]	; (8001d1c <HAL_DMA_IRQHandler+0x1f4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d022      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0xaa>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a63      	ldr	r2, [pc, #396]	; (8001d20 <HAL_DMA_IRQHandler+0x1f8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xa4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a62      	ldr	r2, [pc, #392]	; (8001d24 <HAL_DMA_IRQHandler+0x1fc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d012      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x9e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_DMA_IRQHandler+0x200>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x98>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <HAL_DMA_IRQHandler+0x204>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d102      	bne.n	8001bba <HAL_DMA_IRQHandler+0x92>
 8001bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bb8:	e00e      	b.n	8001bd8 <HAL_DMA_IRQHandler+0xb0>
 8001bba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bbe:	e00b      	b.n	8001bd8 <HAL_DMA_IRQHandler+0xb0>
 8001bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bc4:	e008      	b.n	8001bd8 <HAL_DMA_IRQHandler+0xb0>
 8001bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bca:	e005      	b.n	8001bd8 <HAL_DMA_IRQHandler+0xb0>
 8001bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd0:	e002      	b.n	8001bd8 <HAL_DMA_IRQHandler+0xb0>
 8001bd2:	2340      	movs	r3, #64	; 0x40
 8001bd4:	e000      	b.n	8001bd8 <HAL_DMA_IRQHandler+0xb0>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_DMA_IRQHandler+0x208>)
 8001bda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8094 	beq.w	8001d0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bee:	e08e      	b.n	8001d0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d056      	beq.n	8001cae <HAL_DMA_IRQHandler+0x186>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d051      	beq.n	8001cae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020a 	bic.w	r2, r2, #10
 8001c26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <HAL_DMA_IRQHandler+0x1f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d029      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x166>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a37      	ldr	r2, [pc, #220]	; (8001d1c <HAL_DMA_IRQHandler+0x1f4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x162>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a35      	ldr	r2, [pc, #212]	; (8001d20 <HAL_DMA_IRQHandler+0x1f8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01a      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x15c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_DMA_IRQHandler+0x1fc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d012      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x156>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <HAL_DMA_IRQHandler+0x200>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00a      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x150>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a31      	ldr	r2, [pc, #196]	; (8001d2c <HAL_DMA_IRQHandler+0x204>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d102      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x14a>
 8001c6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c70:	e00e      	b.n	8001c90 <HAL_DMA_IRQHandler+0x168>
 8001c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c76:	e00b      	b.n	8001c90 <HAL_DMA_IRQHandler+0x168>
 8001c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7c:	e008      	b.n	8001c90 <HAL_DMA_IRQHandler+0x168>
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	e005      	b.n	8001c90 <HAL_DMA_IRQHandler+0x168>
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	e002      	b.n	8001c90 <HAL_DMA_IRQHandler+0x168>
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_IRQHandler+0x168>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_DMA_IRQHandler+0x208>)
 8001c92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d034      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cac:	e02f      	b.n	8001d0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d028      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x1e8>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d023      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 020e 	bic.w	r2, r2, #14
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
    }
  }
  return;
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
}
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40020008 	.word	0x40020008
 8001d1c:	4002001c 	.word	0x4002001c
 8001d20:	40020030 	.word	0x40020030
 8001d24:	40020044 	.word	0x40020044
 8001d28:	40020058 	.word	0x40020058
 8001d2c:	4002006c 	.word	0x4002006c
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e169      	b.n	800201c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8158 	bne.w	8002016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a9a      	ldr	r2, [pc, #616]	; (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d05e      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d70:	4a98      	ldr	r2, [pc, #608]	; (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d875      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d76:	4a98      	ldr	r2, [pc, #608]	; (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d058      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d7c:	4a96      	ldr	r2, [pc, #600]	; (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d86f      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d82:	4a96      	ldr	r2, [pc, #600]	; (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d052      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d88:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d869      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a94      	ldr	r2, [pc, #592]	; (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04c      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d94:	4a92      	ldr	r2, [pc, #584]	; (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d863      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d9a:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d046      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001da0:	4a90      	ldr	r2, [pc, #576]	; (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d85d      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d82a      	bhi.n	8001e00 <HAL_GPIO_Init+0xcc>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d859      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_GPIO_Init+0x80>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e1b 	.word	0x08001e1b
 8001dc0:	08001e5d 	.word	0x08001e5d
 8001dc4:	08001e63 	.word	0x08001e63
 8001dc8:	08001e63 	.word	0x08001e63
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001e63 	.word	0x08001e63
 8001dd4:	08001e63 	.word	0x08001e63
 8001dd8:	08001e63 	.word	0x08001e63
 8001ddc:	08001e63 	.word	0x08001e63
 8001de0:	08001e63 	.word	0x08001e63
 8001de4:	08001e63 	.word	0x08001e63
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e63 	.word	0x08001e63
 8001df0:	08001e63 	.word	0x08001e63
 8001df4:	08001e63 	.word	0x08001e63
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <HAL_GPIO_Init+0x2b4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e06:	e02c      	b.n	8001e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e029      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	3304      	adds	r3, #4
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e024      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	3308      	adds	r3, #8
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e01f      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e01a      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e36:	2304      	movs	r3, #4
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e013      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	611a      	str	r2, [r3, #16]
          break;
 8001e4e:	e009      	b.n	8001e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	615a      	str	r2, [r3, #20]
          break;
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          break;
 8001e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d801      	bhi.n	8001e6e <HAL_GPIO_Init+0x13a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_Init+0x13e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d802      	bhi.n	8001e80 <HAL_GPIO_Init+0x14c>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x152>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	3b08      	subs	r3, #8
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80b1 	beq.w	8002016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1ec>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3f      	ldr	r2, [pc, #252]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1e8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1e4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1e0>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	492f      	ldr	r1, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	492c      	ldr	r1, [pc, #176]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4928      	ldr	r1, [pc, #160]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	491e      	ldr	r1, [pc, #120]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4918      	ldr	r1, [pc, #96]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4914      	ldr	r1, [pc, #80]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	490e      	ldr	r1, [pc, #56]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x2e2>
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40011400 	.word	0x40011400
 8002004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_GPIO_Init+0x304>)
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	43db      	mvns	r3, r3
 8002010:	4909      	ldr	r1, [pc, #36]	; (8002038 <HAL_GPIO_Init+0x304>)
 8002012:	4013      	ands	r3, r2
 8002014:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f ae8e 	bne.w	8001d48 <HAL_GPIO_Init+0x14>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	372c      	adds	r7, #44	; 0x2c
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43d9      	mvns	r1, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e26c      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x12c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e246      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x76>
 8002108:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xbc>
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6f      	ldr	r3, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fa8e 	bl	800169c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fa8a 	bl	800169c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1fa      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe4>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fa7a 	bl	800169c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fa76 	bl	800169c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1e6      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x10c>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1ba      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4939      	ldr	r1, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fa2f 	bl	800169c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fa2b 	bl	800169c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e19b      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4927      	ldr	r1, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fa0e 	bl	800169c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fa0a 	bl	800169c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e17a      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff f9ee 	bl	800169c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff f9ea 	bl	800169c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e15a      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 fad8 	bl	8002898 <RCC_Delay>
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7ff f9d4 	bl	800169c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff f9d0 	bl	800169c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d908      	bls.n	8002318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e140      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	42420000 	.word	0x42420000
 8002314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a6 	beq.w	800247e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b97      	ldr	r3, [pc, #604]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b94      	ldr	r3, [pc, #592]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a93      	ldr	r2, [pc, #588]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b8e      	ldr	r3, [pc, #568]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a8a      	ldr	r2, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff f991 	bl	800169c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7ff f98d 	bl	800169c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	; 0x64
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0fd      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 80023a4:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02d      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a72      	ldr	r2, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x356>
 80023dc:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a66      	ldr	r2, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a63      	ldr	r2, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff f941 	bl	800169c <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff f93d 	bl	800169c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0ab      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x37e>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff f92b 	bl	800169c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff f927 	bl	800169c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e095      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a47      	ldr	r2, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8081 	beq.w	800258a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d061      	beq.n	8002558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d146      	bne.n	800252a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x4fc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff f8fb 	bl	800169c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff f8f7 	bl	800169c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e067      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	492d      	ldr	r1, [pc, #180]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a19      	ldr	r1, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	430b      	orrs	r3, r1
 80024f6:	4927      	ldr	r1, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x4fc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff f8cb 	bl	800169c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff f8c7 	bl	800169c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e037      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
 8002528:	e02f      	b.n	800258a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_RCC_OscConfig+0x4fc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff f8b4 	bl	800169c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff f8b0 	bl	800169c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e020      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
 8002556:	e018      	b.n	800258a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e013      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	42420060 	.word	0x42420060

080025a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0d0      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4965      	ldr	r1, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800261e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d040      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e073      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06b      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4936      	ldr	r1, [pc, #216]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7ff f804 	bl	800169c <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7ff f800 	bl	800169c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e053      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d210      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	4922      	ldr	r1, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1cc>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1d0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ff62 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40022000 	.word	0x40022000
 8002764:	40021000 	.word	0x40021000
 8002768:	08004190 	.word	0x08004190
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b490      	push	{r4, r7}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCC_GetSysClockFreq+0xb0>)
 800277c:	1d3c      	adds	r4, r7, #4
 800277e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002784:	f240 2301 	movw	r3, #513	; 0x201
 8002788:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x46>
 80027b2:	e02d      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b6:	623b      	str	r3, [r7, #32]
      break;
 80027b8:	e02d      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027c6:	4413      	add	r3, r2
 80027c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0c5b      	lsrs	r3, r3, #17
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f2:	fb02 f203 	mul.w	r2, r2, r3
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e004      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	623b      	str	r3, [r7, #32]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	623b      	str	r3, [r7, #32]
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6a3b      	ldr	r3, [r7, #32]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc90      	pop	{r4, r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	08004180 	.word	0x08004180
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	003d0900 	.word	0x003d0900

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <HAL_RCC_GetHCLKFreq+0x10>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff2 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	080041a0 	.word	0x080041a0

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffde 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	0adb      	lsrs	r3, r3, #11
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	080041a0 	.word	0x080041a0

08002898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCC_Delay+0x34>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <RCC_Delay+0x38>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b4:	bf00      	nop
  }
  while (Delay --);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <RCC_Delay+0x1c>
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000000 	.word	0x20000000
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e041      	b.n	800296a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fd0e 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f000 fb50 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e041      	b.n	8002a08 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f839 	bl	8002a10 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 fb01 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e041      	b.n	8002ab8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fe fc4b 	bl	80012e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 faa9 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PWM_Start+0x24>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e022      	b.n	8002b2a <HAL_TIM_PWM_Start+0x6a>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d109      	bne.n	8002afe <HAL_TIM_PWM_Start+0x3e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e015      	b.n	8002b2a <HAL_TIM_PWM_Start+0x6a>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d109      	bne.n	8002b18 <HAL_TIM_PWM_Start+0x58>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e008      	b.n	8002b2a <HAL_TIM_PWM_Start+0x6a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e05e      	b.n	8002bf0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x82>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b40:	e013      	b.n	8002b6a <HAL_TIM_PWM_Start+0xaa>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Start+0x92>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b50:	e00b      	b.n	8002b6a <HAL_TIM_PWM_Start+0xaa>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Start+0xa2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b60:	e003      	b.n	8002b6a <HAL_TIM_PWM_Start+0xaa>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fca0 	bl	80034b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <HAL_TIM_PWM_Start+0x138>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_TIM_PWM_Start+0x138>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_TIM_PWM_Start+0xfa>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d009      	beq.n	8002bba <HAL_TIM_PWM_Start+0xfa>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <HAL_TIM_PWM_Start+0x13c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_TIM_PWM_Start+0xfa>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_TIM_PWM_Start+0x140>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d111      	bne.n	8002bde <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d010      	beq.n	8002bee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bdc:	e007      	b.n	8002bee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800

08002c04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_OC_ConfigChannel+0x1a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e046      	b.n	8002cac <HAL_TIM_OC_ConfigChannel+0xa8>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d839      	bhi.n	8002ca0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c2c:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c69 	.word	0x08002c69
 8002c38:	08002ca1 	.word	0x08002ca1
 8002c3c:	08002ca1 	.word	0x08002ca1
 8002c40:	08002ca1 	.word	0x08002ca1
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002ca1 	.word	0x08002ca1
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002ca1 	.word	0x08002ca1
 8002c54:	08002c85 	.word	0x08002c85
 8002c58:	08002ca1 	.word	0x08002ca1
 8002c5c:	08002ca1 	.word	0x08002ca1
 8002c60:	08002ca1 	.word	0x08002ca1
 8002c64:	08002c93 	.word	0x08002c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fa04 	bl	800307c <TIM_OC1_SetConfig>
      break;
 8002c74:	e015      	b.n	8002ca2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fa63 	bl	8003148 <TIM_OC2_SetConfig>
      break;
 8002c82:	e00e      	b.n	8002ca2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fac6 	bl	800321c <TIM_OC3_SetConfig>
      break;
 8002c90:	e007      	b.n	8002ca2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb29 	bl	80032f0 <TIM_OC4_SetConfig>
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0ac      	b.n	8002e28 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	f200 809f 	bhi.w	8002e1c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d19 	.word	0x08002d19
 8002ce8:	08002e1d 	.word	0x08002e1d
 8002cec:	08002e1d 	.word	0x08002e1d
 8002cf0:	08002e1d 	.word	0x08002e1d
 8002cf4:	08002d59 	.word	0x08002d59
 8002cf8:	08002e1d 	.word	0x08002e1d
 8002cfc:	08002e1d 	.word	0x08002e1d
 8002d00:	08002e1d 	.word	0x08002e1d
 8002d04:	08002d9b 	.word	0x08002d9b
 8002d08:	08002e1d 	.word	0x08002e1d
 8002d0c:	08002e1d 	.word	0x08002e1d
 8002d10:	08002e1d 	.word	0x08002e1d
 8002d14:	08002ddb 	.word	0x08002ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f9ac 	bl	800307c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6999      	ldr	r1, [r3, #24]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	619a      	str	r2, [r3, #24]
      break;
 8002d56:	e062      	b.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f9f2 	bl	8003148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6999      	ldr	r1, [r3, #24]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	021a      	lsls	r2, r3, #8
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	619a      	str	r2, [r3, #24]
      break;
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fa3b 	bl	800321c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0208 	orr.w	r2, r2, #8
 8002db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0204 	bic.w	r2, r2, #4
 8002dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69d9      	ldr	r1, [r3, #28]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	61da      	str	r2, [r3, #28]
      break;
 8002dd8:	e021      	b.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fa85 	bl	80032f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	021a      	lsls	r2, r3, #8
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	61da      	str	r2, [r3, #28]
      break;
 8002e1a:	e000      	b.n	8002e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIM_ConfigClockSource+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0b3      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x180>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	d03e      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0xd0>
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	f200 8087 	bhi.w	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8e:	f000 8085 	beq.w	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d87f      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002e98:	2b70      	cmp	r3, #112	; 0x70
 8002e9a:	d01a      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0xa2>
 8002e9c:	2b70      	cmp	r3, #112	; 0x70
 8002e9e:	d87b      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ea0:	2b60      	cmp	r3, #96	; 0x60
 8002ea2:	d050      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x116>
 8002ea4:	2b60      	cmp	r3, #96	; 0x60
 8002ea6:	d877      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ea8:	2b50      	cmp	r3, #80	; 0x50
 8002eaa:	d03c      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0xf6>
 8002eac:	2b50      	cmp	r3, #80	; 0x50
 8002eae:	d873      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d058      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x136>
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d86f      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002eb8:	2b30      	cmp	r3, #48	; 0x30
 8002eba:	d064      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002ebc:	2b30      	cmp	r3, #48	; 0x30
 8002ebe:	d86b      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d060      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d867      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05c      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d05a      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ed0:	e062      	b.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f000 faca 	bl	800347a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ef4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	609a      	str	r2, [r3, #8]
      break;
 8002efe:	e04e      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f000 fab3 	bl	800347a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f22:	609a      	str	r2, [r3, #8]
      break;
 8002f24:	e03b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fa2a 	bl	800338c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2150      	movs	r1, #80	; 0x50
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa81 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e02b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fa48 	bl	80033e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2160      	movs	r1, #96	; 0x60
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa71 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e01b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fa0a 	bl	800338c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa61 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e00b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f000 fa58 	bl	8003446 <TIM_ITRx_SetConfig>
        break;
 8002f96:	e002      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a26      	ldr	r2, [pc, #152]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d108      	bne.n	8002ffa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800

0800307c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <TIM_OC1_SetConfig+0xc8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10c      	bne.n	80030f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0308 	bic.w	r3, r3, #8
 80030de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <TIM_OC1_SetConfig+0xc8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d111      	bne.n	800311e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012c00 	.word	0x40012c00

08003148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0210 	bic.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0320 	bic.w	r3, r3, #32
 8003192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <TIM_OC2_SetConfig+0xd0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10d      	bne.n	80031c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <TIM_OC2_SetConfig+0xd0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d113      	bne.n	80031f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40012c00 	.word	0x40012c00

0800321c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <TIM_OC3_SetConfig+0xd0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10d      	bne.n	8003296 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <TIM_OC3_SetConfig+0xd0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d113      	bne.n	80032c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	621a      	str	r2, [r3, #32]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40012c00 	.word	0x40012c00

080032f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <TIM_OC4_SetConfig+0x98>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d109      	bne.n	8003364 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	019b      	lsls	r3, r3, #6
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00

0800338c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0201 	bic.w	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 030a 	bic.w	r3, r3, #10
 80033c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 0210 	bic.w	r2, r3, #16
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003412:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	031b      	lsls	r3, r3, #12
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003424:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	f043 0307 	orr.w	r3, r3, #7
 8003468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800347a:	b480      	push	{r7}
 800347c:	b087      	sub	sp, #28
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003494:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	431a      	orrs	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	609a      	str	r2, [r3, #8]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e046      	b.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d009      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10c      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4313      	orrs	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800

080035bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e03f      	b.n	800364e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd ff32 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fcf7 	bl	8003ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	; 0x28
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	d17c      	bne.n	8003770 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit+0x2c>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e075      	b.n	8003772 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x3e>
 8003690:	2302      	movs	r3, #2
 8003692:	e06e      	b.n	8003772 <HAL_UART_Transmit+0x11c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036aa:	f7fd fff7 	bl	800169c <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d108      	bne.n	80036d8 <HAL_UART_Transmit+0x82>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e003      	b.n	80036e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036e8:	e02a      	b.n	8003740 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fae2 	bl	8003cbe <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e036      	b.n	8003772 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3302      	adds	r3, #2
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e007      	b.n	8003732 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1cf      	bne.n	80036ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fab2 	bl	8003cbe <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e006      	b.n	8003772 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b088      	sub	sp, #32
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 80c9 	bne.w	800392a <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0c1      	b.n	800392c <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_UARTEx_ReceiveToIdle+0x3c>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e0ba      	b.n	800392c <HAL_UARTEx_ReceiveToIdle+0x1b2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2222      	movs	r2, #34	; 0x22
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d2:	f7fd ff63 	bl	800169c <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d108      	bne.n	8003800 <HAL_UARTEx_ReceiveToIdle+0x86>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e003      	b.n	8003808 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003816:	e074      	b.n	8003902 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b10      	cmp	r3, #16
 8003824:	d114      	bne.n	8003850 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e06d      	b.n	800392c <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d13c      	bne.n	80038d8 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10c      	bne.n	800387e <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003870:	b29a      	uxth	r2, r3
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	3302      	adds	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	e01f      	b.n	80038be <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	d007      	beq.n	8003898 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_UARTEx_ReceiveToIdle+0x12c>
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e008      	b.n	80038b8 <HAL_UARTEx_ReceiveToIdle+0x13e>
           }
           else
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	701a      	strb	r2, [r3, #0]
           }

          pdata8bits++;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d010      	beq.n	8003902 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038e0:	f7fd fedc 	bl	800169c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <HAL_UARTEx_ReceiveToIdle+0x17c>
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e014      	b.n	800392c <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d185      	bne.n	8003818 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003914:	b29b      	uxth	r3, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	b29a      	uxth	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_UART_IRQHandler+0x52>
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa8e 	bl	8003ea0 <UART_Receive_IT>
      return;
 8003984:	e17b      	b.n	8003c7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80b1 	beq.w	8003af0 <HAL_UART_IRQHandler+0x1bc>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_UART_IRQHandler+0x70>
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80a6 	beq.w	8003af0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_UART_IRQHandler+0x90>
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_UART_IRQHandler+0xb0>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0202 	orr.w	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_UART_IRQHandler+0xd0>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00f      	beq.n	8003a2e <HAL_UART_IRQHandler+0xfa>
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_UART_IRQHandler+0xee>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0208 	orr.w	r2, r3, #8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 811e 	beq.w	8003c74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_UART_IRQHandler+0x11e>
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa27 	bl	8003ea0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <HAL_UART_IRQHandler+0x146>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d031      	beq.n	8003ade <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f969 	bl	8003d52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d023      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d013      	beq.n	8003ace <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	4a76      	ldr	r2, [pc, #472]	; (8003c84 <HAL_UART_IRQHandler+0x350>)
 8003aac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd ffc2 	bl	8001a3c <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e00e      	b.n	8003aec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8ec 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e00a      	b.n	8003aec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8e8 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e006      	b.n	8003aec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8e4 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aea:	e0c3      	b.n	8003c74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	bf00      	nop
    return;
 8003aee:	e0c1      	b.n	8003c74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 80a1 	bne.w	8003c3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 809b 	beq.w	8003c3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8095 	beq.w	8003c3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d04e      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b40:	8a3b      	ldrh	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8098 	beq.w	8003c78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4c:	8a3a      	ldrh	r2, [r7, #16]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	f080 8092 	bcs.w	8003c78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8a3a      	ldrh	r2, [r7, #16]
 8003b58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d02b      	beq.n	8003bbc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0210 	bic.w	r2, r2, #16
 8003bb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd ff06 	bl	80019c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fd fa03 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bd2:	e051      	b.n	8003c78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d047      	beq.n	8003c7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003bec:	8a7b      	ldrh	r3, [r7, #18]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0210 	bic.w	r2, r2, #16
 8003c2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c30:	8a7b      	ldrh	r3, [r7, #18]
 8003c32:	4619      	mov	r1, r3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fd f9cf 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c3a:	e01f      	b.n	8003c7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_UART_IRQHandler+0x324>
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f8be 	bl	8003dd2 <UART_Transmit_IT>
    return;
 8003c56:	e012      	b.n	8003c7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <HAL_UART_IRQHandler+0x34a>
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8ff 	bl	8003e70 <UART_EndTransmit_IT>
    return;
 8003c72:	e004      	b.n	8003c7e <HAL_UART_IRQHandler+0x34a>
    return;
 8003c74:	bf00      	nop
 8003c76:	e002      	b.n	8003c7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003c7c:	bf00      	nop
  }
}
 8003c7e:	3728      	adds	r7, #40	; 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	08003dab 	.word	0x08003dab

08003c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cce:	e02c      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d028      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0x30>
 8003cde:	f7fd fcdd 	bl	800169c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d21d      	bcs.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e00f      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4013      	ands	r3, r2
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d0c3      	beq.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0210 	bic.w	r2, r2, #16
 8003d90:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff ff71 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b21      	cmp	r3, #33	; 0x21
 8003de4:	d13e      	bne.n	8003e64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	d114      	bne.n	8003e1a <UART_Transmit_IT+0x48>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d110      	bne.n	8003e1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	1c9a      	adds	r2, r3, #2
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	621a      	str	r2, [r3, #32]
 8003e18:	e008      	b.n	8003e2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6211      	str	r1, [r2, #32]
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10f      	bne.n	8003e60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fef9 	bl	8003c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b22      	cmp	r3, #34	; 0x22
 8003eb2:	f040 8099 	bne.w	8003fe8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebe:	d117      	bne.n	8003ef0 <UART_Receive_IT+0x50>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
 8003eee:	e026      	b.n	8003f3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d007      	beq.n	8003f14 <UART_Receive_IT+0x74>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <UART_Receive_IT+0x82>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e008      	b.n	8003f34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d148      	bne.n	8003fe4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0220 	bic.w	r2, r2, #32
 8003f60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d123      	bne.n	8003fda <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0210 	bic.w	r2, r2, #16
 8003fa6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d10a      	bne.n	8003fcc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd f800 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
 8003fd8:	e002      	b.n	8003fe0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fe5d 	bl	8003c9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e002      	b.n	8003fea <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800402e:	f023 030c 	bic.w	r3, r3, #12
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	430b      	orrs	r3, r1
 800403a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <UART_SetConfig+0x114>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800405c:	f7fe fc08 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	e002      	b.n	800406a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe fbf0 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8004068:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009a      	lsls	r2, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <UART_SetConfig+0x118>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	0119      	lsls	r1, r3, #4
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <UART_SetConfig+0x118>)
 80040a2:	fba3 0302 	umull	r0, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2064      	movs	r0, #100	; 0x64
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <UART_SetConfig+0x118>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	4419      	add	r1, r3
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <UART_SetConfig+0x118>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	440a      	add	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40013800 	.word	0x40013800
 800410c:	51eb851f 	.word	0x51eb851f

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2600      	movs	r6, #0
 8004114:	4d0c      	ldr	r5, [pc, #48]	; (8004148 <__libc_init_array+0x38>)
 8004116:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	f000 f822 	bl	8004168 <_init>
 8004124:	2600      	movs	r6, #0
 8004126:	4d0a      	ldr	r5, [pc, #40]	; (8004150 <__libc_init_array+0x40>)
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <__libc_init_array+0x44>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	080041a8 	.word	0x080041a8
 800414c:	080041a8 	.word	0x080041a8
 8004150:	080041a8 	.word	0x080041a8
 8004154:	080041ac 	.word	0x080041ac

08004158 <memset>:
 8004158:	4603      	mov	r3, r0
 800415a:	4402      	add	r2, r0
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	f803 1b01 	strb.w	r1, [r3], #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <_init>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	bf00      	nop
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr

08004174 <_fini>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr
